// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(cuid())
  email                  String    @unique
  name                   String?
  googleId               String?   @unique
  hubspotId              String?   @unique
  accessToken            String?
  refreshToken           String?
  hubspotToken           String?
  hubspotRefreshToken    String?
  hubspotTokenExpiresAt  DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  
  // Relations
  conversations Conversation[]
  tasks         Task[]
  instructions  Instruction[]
  emails        Email[]
  contacts      Contact[]
  meetings      Meeting[]
  webhookEvents WebhookEvent[]
}

model Conversation {
  id        String   @id @default(cuid())
  title     String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String
  metadata       Json?
  createdAt      DateTime     @default(now())
  
  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Task {
  id          String     @id @default(cuid())
  userId      String
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  metadata    Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Instruction {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Email {
  id          String   @id @default(cuid())
  userId      String
  messageId   String   @unique
  threadId    String
  subject     String
  from        String
  to          String[]
  cc          String[]
  bcc         String[]
  body        String
  htmlBody    String?
  date        DateTime
  labels      String[]
  isRead      Boolean  @default(false)
  isImportant Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id          String   @id @default(cuid())
  userId      String
  hubspotId   String?  @unique
  email       String?
  firstName   String?
  lastName    String?
  phone       String?
  company     String?
  notes       String?
  properties  Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Meeting {
  id          String   @id @default(cuid())
  userId      String
  googleId    String?  @unique
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  attendees   String[]
  location    String?
  status      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VectorEmbedding {
  id        String   @id @default(cuid())
  content   String
  embedding String?  // Store as JSON string temporarily
  metadata  Json?
  type      EmbeddingType
  sourceId  String
  createdAt DateTime @default(now())

  @@index([type, sourceId])
}

model WebhookEvent {
  id        String   @id @default(cuid())
  type      String   // 'gmail', 'calendar', 'hubspot'
  userId    String
  data      Json?
  timestamp DateTime @default(now())
  processed Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([processed, timestamp])
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EmbeddingType {
  EMAIL
  CONTACT
  MEETING
  NOTE
}
